// Import required modules
const express = require('express');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');

const app = express();
app.use(bodyParser.json());

// JWT secret key
const SECRET_KEY = "mysecret123";

// In-memory user storage
let users = [];

// ---------------- REGISTER API ----------------
app.post('/register', async (req, res) => {
const { username, password } = req.body;

// Check if user exists  
const userExists = users.find(u => u.username === username);  
if (userExists) return res.status(400).json({ message: 'User already exists' });  

try {  
    // Hash the password  
    const hashedPassword = await bcrypt.hash(password, 10);  

    // Store user  
    users.push({ username, password: hashedPassword });  

    res.status(201).json({ message: 'User registered successfully' });  
} catch (err) {  
    res.status(500).json({ message: 'Error registering user' });  
}

});

// ---------------- LOGIN API ----------------
app.post('/login', async (req, res) => {
const { username, password } = req.body;

// Find user  
const user = users.find(u => u.username === username);  
if (!user) return res.status(400).json({ message: 'Invalid credentials' });  

// Verify password  
const isPasswordValid = await bcrypt.compare(password, user.password);  
if (!isPasswordValid) return res.status(400).json({ message: 'Invalid credentials' });  

// Generate JWT token  
const token = jwt.sign({ username: user.username }, SECRET_KEY, { expiresIn: '1h' });  

res.json({ message: 'Login Successful', token });

});

// ---------------- PROTECTED ROUTE ----------------
app.get('/profile', (req, res) => {
const authHeader = req.headers.authorization; // Expect: Bearer <token>
if (!authHeader) return res.status(401).json({ message: 'Missing token' });

const token = authHeader.split(' ')[1]; // Extract token  

try {  
    const decoded = jwt.verify(token, SECRET_KEY);  
    res.json({ message: 'Welcome to your profile', user: decoded });  
} catch (err) {  
    res.status(401).json({ message: 'Invalid or expired token' });  
}

});

// ---------------- START SERVER ----------------
const PORT = 5000;
app.listen(PORT, () => {
console.log(Server running on port ${PORT});
});

